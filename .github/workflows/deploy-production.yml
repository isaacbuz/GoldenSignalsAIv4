name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.2.3)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Pre-deployment Checks
  pre-deployment:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Deploying version: $VERSION"
    
    - name: Verify version exists
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/goldensignals-backend:${{ steps.version.outputs.version }} || exit 1
        docker pull ${{ secrets.DOCKER_USERNAME }}/goldensignals-frontend:${{ steps.version.outputs.version }} || exit 1

  # Database Migration
  database-migration:
    needs: pre-deployment
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.pre-deployment.outputs.version }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: poetry install --only main
    
    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
      run: |
        poetry run alembic upgrade head

  # Deploy Backend
  deploy-backend:
    needs: [pre-deployment, database-migration]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PROD }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy backend
      run: |
        # Update deployment
        kubectl set image deployment/goldensignals-backend \
          backend=${{ secrets.DOCKER_USERNAME }}/goldensignals-backend:${{ needs.pre-deployment.outputs.version }} \
          -n production
        
        # Wait for rollout
        kubectl rollout status deployment/goldensignals-backend -n production --timeout=10m
        
        # Verify deployment
        kubectl get pods -n production -l app=goldensignals-backend

  # Deploy Frontend
  deploy-frontend:
    needs: [pre-deployment, deploy-backend]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure kubectl
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PROD }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy frontend
      run: |
        # Update deployment
        kubectl set image deployment/goldensignals-frontend \
          frontend=${{ secrets.DOCKER_USERNAME }}/goldensignals-frontend:${{ needs.pre-deployment.outputs.version }} \
          -n production
        
        # Wait for rollout
        kubectl rollout status deployment/goldensignals-frontend -n production --timeout=10m
        
        # Verify deployment
        kubectl get pods -n production -l app=goldensignals-frontend

  # Health Checks
  health-checks:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for services to stabilize
      run: sleep 30
    
    - name: Backend health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://api.goldensignals.ai/health)
        if [ $response -ne 200 ]; then
          echo "Backend health check failed with status $response"
          exit 1
        fi
        echo "Backend is healthy"
    
    - name: Frontend health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://goldensignals.ai)
        if [ $response -ne 200 ]; then
          echo "Frontend health check failed with status $response"
          exit 1
        fi
        echo "Frontend is healthy"
    
    - name: Critical endpoints check
      run: |
        # Check API endpoints
        endpoints=(
          "https://api.goldensignals.ai/api/v1/signals"
          "https://api.goldensignals.ai/api/v1/market-data"
          "https://api.goldensignals.ai/api/v1/portfolio"
        )
        
        for endpoint in "${endpoints[@]}"; do
          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.HEALTH_CHECK_TOKEN }}" "$endpoint")
          if [ $response -ne 200 ] && [ $response -ne 401 ]; then
            echo "Endpoint $endpoint failed with status $response"
            exit 1
          fi
          echo "Endpoint $endpoint is healthy"
        done

  # Performance Validation
  performance-validation:
    needs: health-checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        k6 run --out json=results.json tests/k6/production-smoke.js
    
    - name: Analyze results
      run: |
        # Check if performance meets SLA
        python scripts/analyze_k6_results.py results.json
    
    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: results.json

  # Update Monitoring
  update-monitoring:
    needs: health-checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Update Grafana annotations
      run: |
        curl -X POST https://grafana.goldensignals.ai/api/annotations \
          -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "dashboardId": 1,
            "time": '$(date +%s000)',
            "tags": ["deployment", "production"],
            "text": "Deployed version ${{ needs.pre-deployment.outputs.version }}"
          }'
    
    - name: Create PagerDuty maintenance window
      run: |
        curl -X POST https://api.pagerduty.com/maintenance_windows \
          -H "Authorization: Token token=${{ secrets.PAGERDUTY_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "maintenance_window": {
              "type": "maintenance_window",
              "start_time": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "end_time": "'$(date -u -d '+30 minutes' +%Y-%m-%dT%H:%M:%SZ)'",
              "description": "Production deployment ${{ needs.pre-deployment.outputs.version }}",
              "services": [{"id": "${{ secrets.PAGERDUTY_SERVICE_ID }}", "type": "service_reference"}]
            }
          }'

  # Rollback on Failure
  rollback:
    needs: [deploy-backend, deploy-frontend, health-checks]
    runs-on: ubuntu-latest
    if: failure()
    environment: production
    
    steps:
    - name: Configure kubectl
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PROD }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Rollback deployments
      run: |
        echo "Rolling back due to deployment failure"
        kubectl rollout undo deployment/goldensignals-backend -n production
        kubectl rollout undo deployment/goldensignals-frontend -n production
        
        # Wait for rollback
        kubectl rollout status deployment/goldensignals-backend -n production
        kubectl rollout status deployment/goldensignals-frontend -n production
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "⚠️ Production deployment rolled back",
            attachments: [{
              color: 'danger',
              text: `Deployment of version ${{ needs.pre-deployment.outputs.version }} failed and was rolled back.`
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Post-deployment
  post-deployment:
    needs: [health-checks, performance-validation]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Update deployment tracking
      run: |
        # Update internal deployment tracking system
        curl -X POST https://api.goldensignals.ai/internal/deployments \
          -H "Authorization: Bearer ${{ secrets.INTERNAL_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "version": "${{ needs.pre-deployment.outputs.version }}",
            "environment": "production",
            "status": "success",
            "deployed_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "deployed_by": "${{ github.actor }}"
          }'
    
    - name: Notify success
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "✅ Production deployment successful",
            attachments: [{
              color: 'good',
              text: `Version ${{ needs.pre-deployment.outputs.version }} deployed successfully to production`,
              fields: [
                {
                  title: 'Version',
                  value: '${{ needs.pre-deployment.outputs.version }}',
                  short: true
                },
                {
                  title: 'Deployed by',
                  value: '${{ github.actor }}',
                  short: true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Trigger smoke tests
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: production-smoke-tests
        client-payload: '{"version": "${{ needs.pre-deployment.outputs.version }}"}' 