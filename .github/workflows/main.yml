name: Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.10'

jobs:
  frontend-lint-and-type:
    name: Frontend Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint
        continue-on-error: true  # Allow workflow to continue even with lint errors for now

      - name: Run TypeScript checks
        working-directory: ./frontend
        run: npm run typecheck
        continue-on-error: true  # Allow workflow to continue even with type errors for now

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: eslint-results
          path: frontend/eslint-report.json
          retention-days: 7

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: frontend-lint-and-type

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build
        env:
          CI: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  backend-lint:
    name: Backend Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run Flake8 linter
        run: flake8 src/
        continue-on-error: true  # Allow workflow to continue even with lint errors for now

      - name: Check Black formatting
        run: black --check src/
        continue-on-error: true

      - name: Check import sorting
        run: isort --check-only src/
        continue-on-error: true

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: backend-lint

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379
          TESTING: true
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        continue-on-error: true  # Allow workflow to continue even with test failures for now

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'  # Don't fail the build on vulnerabilities
          severity: 'CRITICAL,HIGH'

      - name: Frontend dependency audit
        working-directory: ./frontend
        run: npm audit --audit-level=high || true
        continue-on-error: true

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-test, security-scan]
    if: always()

    steps:
      - name: Check workflow status
        run: |
          echo "Frontend Build: ${{ needs.frontend-build.result }}"
          echo "Backend Test: ${{ needs.backend-test.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

          if [[ "${{ needs.frontend-build.result }}" == "failure" ]] || \
             [[ "${{ needs.backend-test.result }}" == "failure" ]] || \
             [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "::warning::Some checks failed, but the workflow completed. Please review the results."
          else
            echo "::notice::All checks passed successfully!"
          fi
