name: ML Service CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'ml_models/**'
      - 'src/workers/**'
      - 'integrated_ml_backtest_api.py'
      - 'requirements-ml.txt'
      - 'Dockerfile.ml'
      - '.github/workflows/ml-deployment.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'ml_models/**'
      - 'src/workers/**'
      - 'integrated_ml_backtest_api.py'
      - 'requirements-ml.txt'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ml-service
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test ML Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-ml.txt
          pip install -r requirements-test.txt

      - name: Run ML tests
        run: |
          pytest tests/ml/ -v --cov=ml_models --cov=integrated_ml_backtest_api \
            --cov-report=xml --cov-report=html --junitxml=test-results.xml

      - name: Run performance benchmarks
        run: |
          pytest tests/ml/test_performance.py -v --benchmark-only \
            --benchmark-json=benchmark-results.json

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            htmlcov/
            benchmark-results.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ml-service
          name: ml-service-coverage

  model-validation:
    name: Validate ML Models
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ml.txt
          pip install great-expectations evidently

      - name: Download test data
        run: |
          python scripts/download_test_data.py

      - name: Validate model performance
        run: |
          python scripts/validate_models.py \
            --min-sharpe-ratio 0.5 \
            --max-drawdown 0.2 \
            --min-accuracy 0.55

      - name: Check for model drift
        run: |
          python scripts/check_model_drift.py \
            --reference-data data/reference_predictions.csv \
            --current-data data/current_predictions.csv

      - name: Generate validation report
        run: |
          python scripts/generate_validation_report.py \
            --output reports/model_validation.html

      - name: Upload validation reports
        uses: actions/upload-artifact@v3
        with:
          name: validation-reports
          path: reports/

  build:
    name: Build ML Service Image
    runs-on: ubuntu-latest
    needs: [test, model-validation]
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ml
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.goldensignals.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name goldensignals-staging --region us-east-1

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/ml-service \
            ml-service=${{ needs.build.outputs.image-tag }} \
            -n goldensignals-staging

          kubectl set image deployment/ml-worker \
            worker=${{ needs.build.outputs.image-tag }} \
            -n goldensignals-staging

          kubectl rollout status deployment/ml-service -n goldensignals-staging
          kubectl rollout status deployment/ml-worker -n goldensignals-staging

      - name: Run smoke tests
        run: |
          ./scripts/smoke_tests.sh staging

      - name: Update model registry
        run: |
          python scripts/update_model_registry.py \
            --environment staging \
            --image-tag ${{ needs.build.outputs.image-tag }} \
            --image-digest ${{ needs.build.outputs.image-digest }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.goldensignals.ai
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name goldensignals-production --region us-east-1

      - name: Create deployment backup
        run: |
          kubectl get deployment ml-service -n goldensignals -o yaml > ml-service-backup.yaml
          kubectl get deployment ml-worker -n goldensignals -o yaml > ml-worker-backup.yaml

      - name: Deploy to Kubernetes (Canary)
        run: |
          # Deploy canary version (10% traffic)
          kubectl apply -f k8s/production/ml-service-canary.yaml
          kubectl set image deployment/ml-service-canary \
            ml-service=${{ needs.build.outputs.image-tag }} \
            -n goldensignals

          kubectl rollout status deployment/ml-service-canary -n goldensignals

          # Wait for canary metrics
          sleep 300

      - name: Validate canary deployment
        run: |
          python scripts/validate_canary.py \
            --service ml-service \
            --namespace goldensignals \
            --success-rate-threshold 0.99 \
            --latency-threshold 200

      - name: Promote to production
        run: |
          # Update main deployment
          kubectl set image deployment/ml-service \
            ml-service=${{ needs.build.outputs.image-tag }} \
            -n goldensignals

          kubectl set image deployment/ml-worker \
            worker=${{ needs.build.outputs.image-tag }} \
            -n goldensignals

          # Wait for rollout
          kubectl rollout status deployment/ml-service -n goldensignals
          kubectl rollout status deployment/ml-worker -n goldensignals

          # Remove canary
          kubectl delete deployment ml-service-canary -n goldensignals

      - name: Update model registry
        run: |
          python scripts/update_model_registry.py \
            --environment production \
            --image-tag ${{ needs.build.outputs.image-tag }} \
            --image-digest ${{ needs.build.outputs.image-digest }}

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'ML Service deployed to production: ${{ needs.build.outputs.image-tag }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1

      - name: Rollback deployment
        run: |
          aws eks update-kubeconfig --name goldensignals-production --region us-east-1
          kubectl rollout undo deployment/ml-service -n goldensignals
          kubectl rollout undo deployment/ml-worker -n goldensignals

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'ML Service deployment rolled back due to failure!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
