name: Production Deployment Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: goldensignals
  CLUSTER_NAME: goldensignals-prod
  CLUSTER_ZONE: us-central1-a

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-test.txt
          
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --junit-xml=test-results/unit-tests.xml
          
      - name: Run integration tests
        run: |
          docker-compose -f docker-compose.integration-test.yml up --abort-on-container-exit
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

  build:
    name: Build Docker Images
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - market-data-mcp
          - rag-query-mcp
          - agent-comm-mcp
          - risk-analytics-mcp
          - execution-mcp
          - api-gateway
          - frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.service }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scanning
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/api-gateway:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
          
      - name: Configure kubectl
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Update image tags
        run: |
          for service in market-data-mcp rag-query-mcp agent-comm-mcp risk-analytics-mcp execution-mcp api-gateway frontend; do
            kubectl set image deployment/$service $service=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/$service:${{ github.sha }} -n goldensignals-staging
          done
          
      - name: Wait for rollout
        run: |
          for service in market-data-mcp rag-query-mcp agent-comm-mcp risk-analytics-mcp execution-mcp api-gateway frontend; do
            kubectl rollout status deployment/$service -n goldensignals-staging --timeout=5m
          done
          
      - name: Run smoke tests
        run: |
          ./scripts/run-smoke-tests.sh staging

  deploy-production:
    name: Deploy to Production
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }}
          
      - name: Create deployment artifacts
        run: |
          mkdir -p deploy
          for file in k8s/production/*.yaml; do
            sed "s|:latest|:${{ github.sha }}|g" $file > deploy/$(basename $file)
          done
          
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f deploy/
          
      - name: Wait for rollout
        run: |
          for deployment in $(kubectl get deployments -n goldensignals -o jsonpath='{.items[*].metadata.name}'); do
            kubectl rollout status deployment/$deployment -n goldensignals --timeout=10m
          done
          
      - name: Run health checks
        run: |
          ./scripts/health-check.sh production
          
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed for commit ${{ github.sha }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    name: Rollback Production
    needs: deploy-production
    runs-on: ubuntu-latest
    if: failure()
    environment: production
    steps:
      - name: Configure kubectl
        run: |
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
      - name: Rollback deployments
        run: |
          for deployment in $(kubectl get deployments -n goldensignals -o jsonpath='{.items[*].metadata.name}'); do
            kubectl rollout undo deployment/$deployment -n goldensignals
          done
          
      - name: Send rollback notification
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          text: 'ALERT: Production deployment rolled back due to failure'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }} 