version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: goldensignals-db
    environment:
      POSTGRES_DB: goldensignals
      POSTGRES_USER: goldensignals
      POSTGRES_PASSWORD: ${DB_PASSWORD:-goldensignals_secure_password}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - goldensignals_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U goldensignals -d goldensignals"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: goldensignals-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-goldensignals_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - goldensignals_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: goldensignals-backend
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://goldensignals:${DB_PASSWORD:-goldensignals_secure_password}@database:5432/goldensignals
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-goldensignals_redis_password}@redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your_ultra_secure_secret_key_change_this_in_production}
      
      # AI Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Trading APIs
      ALPHA_VANTAGE_KEY: ${ALPHA_VANTAGE_KEY}
      POLYGON_KEY: ${POLYGON_KEY}
      ALPACA_KEY: ${ALPACA_KEY}
      ALPACA_SECRET: ${ALPACA_SECRET}
      
      # Application Settings
      ENVIRONMENT: production
      DEBUG: false
      HOST: 0.0.0.0
      PORT: 8000
      WORKERS: 4
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      PROMETHEUS_ENABLED: true
      
      # CORS
      CORS_ORIGINS: "http://localhost:3000,https://goldensignals.ai"
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    networks:
      - goldensignals_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: goldensignals-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:8000/api/v1
      VITE_WS_BASE_URL: ws://localhost:8000
      VITE_ENVIRONMENT: production
    ports:
      - "3000:80"
    networks:
      - goldensignals_network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: goldensignals-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - goldensignals_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: goldensignals-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - goldensignals_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: goldensignals-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    networks:
      - goldensignals_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ML Model Training Service
  ml_trainer:
    build:
      context: .
      dockerfile: Dockerfile.ml
    container_name: goldensignals-ml-trainer
    environment:
      DATABASE_URL: postgresql+asyncpg://goldensignals:${DB_PASSWORD:-goldensignals_secure_password}@database:5432/goldensignals
      REDIS_URL: redis://:${REDIS_PASSWORD:-goldensignals_redis_password}@redis:6379/0
      ENVIRONMENT: production
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    networks:
      - goldensignals_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Background Task Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: goldensignals-worker
    command: celery -A src.core.celery worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: postgresql+asyncpg://goldensignals:${DB_PASSWORD:-goldensignals_secure_password}@database:5432/goldensignals
      REDIS_URL: redis://:${REDIS_PASSWORD:-goldensignals_redis_password}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-goldensignals_redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-goldensignals_redis_password}@redis:6379/2
      ENVIRONMENT: production
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - goldensignals_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: goldensignals-scheduler
    command: celery -A src.core.celery beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      DATABASE_URL: postgresql+asyncpg://goldensignals:${DB_PASSWORD:-goldensignals_secure_password}@database:5432/goldensignals
      REDIS_URL: redis://:${REDIS_PASSWORD:-goldensignals_redis_password}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-goldensignals_redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-goldensignals_redis_password}@redis:6379/2
      ENVIRONMENT: production
    volumes:
      - ./logs:/app/logs
    networks:
      - goldensignals_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

networks:
  goldensignals_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 