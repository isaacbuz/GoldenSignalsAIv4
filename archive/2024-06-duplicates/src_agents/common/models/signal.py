from dataclasses import dataclass
from datetime import datetime
from typing import Optional, Dict, Any

@dataclass
class Signal:
    """Trading signal generated by an agent."""
    
    timestamp: datetime
    symbol: str
    direction: int  # 1 for buy, -1 for sell, 0 for hold
    strength: float  # Signal strength between 0 and 1
    confidence: float  # Model confidence between 0 and 1
    metadata: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        """Validate signal parameters."""
        if self.direction not in [-1, 0, 1]:
            raise ValueError("Signal direction must be -1 (sell), 0 (hold), or 1 (buy)")
            
        if not 0 <= self.strength <= 1:
            raise ValueError("Signal strength must be between 0 and 1")
            
        if not 0 <= self.confidence <= 1:
            raise ValueError("Signal confidence must be between 0 and 1")
            
    @property
    def is_buy(self) -> bool:
        """Check if signal is a buy signal."""
        return self.direction == 1
        
    @property
    def is_sell(self) -> bool:
        """Check if signal is a sell signal."""
        return self.direction == -1
        
    @property
    def is_hold(self) -> bool:
        """Check if signal is a hold signal."""
        return self.direction == 0
        
    @property
    def weighted_strength(self) -> float:
        """Calculate strength weighted by confidence."""
        return self.strength * self.confidence
        
    def to_dict(self) -> Dict[str, Any]:
        """Convert signal to dictionary."""
        return {
            'timestamp': self.timestamp.isoformat(),
            'symbol': self.symbol,
            'direction': self.direction,
            'strength': self.strength,
            'confidence': self.confidence,
            'metadata': self.metadata or {}
        }
        
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Signal':
        """Create signal from dictionary."""
        return cls(
            timestamp=datetime.fromisoformat(data['timestamp']),
            symbol=data['symbol'],
            direction=int(data['direction']),
            strength=float(data['strength']),
            confidence=float(data['confidence']),
            metadata=data.get('metadata')
        ) 