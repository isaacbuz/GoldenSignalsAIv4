from archive.legacy_backend_agents.base import BaseSignalAgent
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

class GPTQAAgent(BaseSignalAgent):
    """
    Uses a GPT-style model (e.g., GPT-2, GPT-3, or open LLM) to answer finance-related questions based on provided context (e.g., news, filings).
    """
    def __init__(self, symbol: str, model_name="gpt2"):
        super().__init__(symbol)
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.model = AutoModelForCausalLM.from_pretrained(model_name)

    def run(self, context: str, question: str) -> dict:
        prompt = f"Context: {context}\nQuestion: {question}\nAnswer:"
        inputs = self.tokenizer.encode(prompt, return_tensors="pt")
        with torch.no_grad():
            outputs = self.model.generate(inputs, max_length=256, num_return_sequences=1, pad_token_id=self.tokenizer.eos_token_id)
        answer = self.tokenizer.decode(outputs[0], skip_special_tokens=True).split("Answer:")[-1].strip()
        explanation = f"Answer generated by GPT model."
        return {"agent": "GPTQAAgent", "answer": answer, "confidence": 80, "explanation": explanation}
