import type { Meta, StoryObj } from '@storybook/react';
import { BrowserRouter } from 'react-router-dom';
import { Sidebar } from './Sidebar';
import { useState } from 'react';

const meta = {
    title: 'Trading/Sidebar',
    component: Sidebar,
    decorators: [
        (Story) => (
            <BrowserRouter>
                <div className="h-screen flex bg-gray-50 dark:bg-gray-800">
                    <Story />
                    <div className="flex-1 p-6">
                        <h1 className="text-2xl font-bold mb-4">Main Content Area</h1>
                        <p className="text-gray-600">The sidebar demonstrates component reuse...</p>
                    </div>
                </div>
            </BrowserRouter>
        ),
    ],
    parameters: {
        layout: 'fullscreen',
        docs: {
            description: {
                component: `
# Sidebar Component

Demonstrates **maximum component reuse** for navigation and metrics display.

## Reused Components:
- \`MetricCard\` (49 lines) × 3 = **147 lines**
- \`CommandPalette\` (573 lines) - Full search functionality
- \`Button\` - Core component
- \`Heroicons\` - Icon library

## Total Impact:
- **720+ lines** of functionality reused
- Only **~200 lines** of new code
- Features: metrics, navigation, search, keyboard shortcuts

## Key Features:
- **Collapsible**: Click toggle button
- **Quick Search**: Press ⌘K to open CommandPalette
- **Live Metrics**: Reuses MetricCard for portfolio stats
- **Responsive**: Works on all screen sizes
- **Dark Mode**: Full theme support
        `
            }
        }
    },
    tags: ['autodocs'],
} satisfies Meta<typeof Sidebar>;

export default meta;
type Story = StoryObj<typeof meta>;

// Default expanded state
export const Default: Story = {
    args: {
        collapsed: false,
        metrics: {
            portfolio: { value: '$125,420', change: '+2.5%', trend: 'up' },
            signals: { value: '12', change: '+3', trend: 'up' },
            winRate: { value: '68%', change: '+5%', trend: 'up' }
        }
    }
};

// Collapsed state
export const Collapsed: Story = {
    args: {
        collapsed: true,
        metrics: Default.args?.metrics
    },
    parameters: {
        docs: {
            description: {
                story: 'Sidebar in collapsed state - only icons visible'
            }
        }
    }
};

// With negative metrics
export const NegativeMetrics: Story = {
    args: {
        collapsed: false,
        metrics: {
            portfolio: { value: '$98,750', change: '-1.2%', trend: 'down' },
            signals: { value: '8', change: '-2', trend: 'down' },
            winRate: { value: '45%', change: '-8%', trend: 'down' }
        }
    },
    parameters: {
        docs: {
            description: {
                story: 'Shows how MetricCard components handle negative values'
            }
        }
    }
};

// Interactive demo with state
export const Interactive: Story = {
    render: () => {
        const [collapsed, setCollapsed] = useState(false);

        return (
            <Sidebar
                collapsed={collapsed}
                onToggle={() => setCollapsed(!collapsed)}
                metrics={{
                    portfolio: { value: '$150,000', change: '+5.2%', trend: 'up' },
                    signals: { value: '24', change: '+8', trend: 'up' },
                    winRate: { value: '72%', change: '+12%', trend: 'up' }
                }}
            />
        );
    },
    parameters: {
        docs: {
            description: {
                story: `
### Try these interactions:
1. **Toggle Sidebar**: Click the arrow button
2. **Command Palette**: Press ⌘K (or Ctrl+K)
3. **Navigation**: Click different menu items
4. **Hover Effects**: Hover over navigation items

Notice how the CommandPalette (573 lines) provides instant search functionality!
        `
            }
        }
    }
};

// Dark theme
export const DarkTheme: Story = {
    args: Default.args,
    parameters: {
        backgrounds: {
            default: 'dark'
        },
        docs: {
            description: {
                story: 'Sidebar with dark theme - all reused components support theming'
            }
        }
    }
};

// Mobile responsive
export const Mobile: Story = {
    args: {
        collapsed: true,
        metrics: Default.args?.metrics
    },
    parameters: {
        viewport: {
            defaultViewport: 'iphone12'
        },
        docs: {
            description: {
                story: 'On mobile, sidebar defaults to collapsed state'
            }
        }
    }
};

// With custom metrics
export const HighPerformance: Story = {
    args: {
        collapsed: false,
        metrics: {
            portfolio: { value: '$1.2M', change: '+125%', trend: 'up' },
            signals: { value: '156', change: '+89', trend: 'up' },
            winRate: { value: '91%', change: '+23%', trend: 'up' }
        }
    },
    parameters: {
        docs: {
            description: {
                story: 'Exceptional performance metrics showcasing MetricCard flexibility'
            }
        }
    }
};

// Component reuse breakdown
export const ReuseBreakdown: Story = {
    args: Default.args,
    parameters: {
        docs: {
            description: {
                story: `
## Component Reuse Analysis

### MetricCard Usage (3 instances):
- Portfolio Value: Shows current value with trend
- Active Signals: Displays signal count
- Win Rate: Shows performance percentage

Each MetricCard brings:
- Animated trend indicators
- Color-coded changes
- Responsive design
- Dark mode support

### CommandPalette Integration:
- 573 lines of search functionality
- Fuzzy search
- Keyboard navigation
- Recent searches
- Quick actions

### Total Savings:
\`\`\`
MetricCard:      49 × 3 = 147 lines
CommandPalette:          = 573 lines
Button & Icons:          = ~50 lines
                         -----------
Total Reused:            = 770 lines
New Code:                = ~200 lines
Efficiency:              = 79% reuse!
\`\`\`
        `
            }
        }
    }
}; 