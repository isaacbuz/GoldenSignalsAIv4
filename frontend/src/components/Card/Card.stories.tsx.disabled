import type { Meta, StoryObj } from '@storybook/react';
import { Card, CardHeader, CardActions, CardMedia } from './Card';
import { Button } from '../Core/Button/Button';
import { EllipsisVerticalIcon, HeartIcon, ShareIcon, ChatBubbleLeftIcon } from '@heroicons/react/24/outline';
import { UserCircleIcon } from '@heroicons/react/24/solid';

const meta = {
    title: 'Core/Card',
    component: Card,
    parameters: {
        layout: 'centered',
        docs: {
            description: {
                component: 'A versatile card component for displaying content with multiple variants and layouts.',
            },
        },
    },
    tags: ['autodocs'],
    argTypes: {
        variant: {
            control: 'select',
            options: ['elevated', 'outlined', 'contained'],
            description: 'Visual style variant of the card',
        },
        padding: {
            control: 'select',
            options: ['none', 'small', 'medium', 'large'],
            description: 'Padding size inside the card',
        },
        borderRadius: {
            control: 'select',
            options: ['none', 'small', 'medium', 'large'],
            description: 'Border radius of the card',
        },
        elevation: {
            control: 'select',
            options: [0, 1, 2, 3, 4],
            description: 'Shadow depth for elevated variant',
        },
        mediaPosition: {
            control: 'select',
            options: ['top', 'bottom', 'left', 'right'],
            description: 'Position of media content',
        },
        clickable: {
            control: 'boolean',
            description: 'Whether the card is clickable',
        },
        loading: {
            control: 'boolean',
            description: 'Whether the card is in loading state',
        },
        skeleton: {
            control: 'boolean',
            description: 'Whether to show skeleton loader',
        },
        selected: {
            control: 'boolean',
            description: 'Whether the card is selected',
        },
        disabled: {
            control: 'boolean',
            description: 'Whether the card is disabled',
        },
    },
    decorators: [
        (Story) => (
            <div style={{ minWidth: '300px', maxWidth: '600px' }}>
                <Story />
            </div>
        ),
    ],
} satisfies Meta<typeof Card>;

export default meta;
type Story = StoryObj<typeof meta>;

// Basic variants
export const Default: Story = {
    args: {
        children: 'This is a basic card with some content. Cards are surfaces that display content and actions on a single topic.',
        'data-testid': 'default-card',
    },
};

export const Elevated: Story = {
    args: {
        variant: 'elevated',
        elevation: 2,
        children: 'Elevated cards have a shadow that makes them appear raised from the surface.',
        'data-testid': 'elevated-card',
    },
};

export const Outlined: Story = {
    args: {
        variant: 'outlined',
        children: 'Outlined cards have a visible border but no shadow.',
        'data-testid': 'outlined-card',
    },
};

export const Contained: Story = {
    args: {
        variant: 'contained',
        children: 'Contained cards have a background color but no border or shadow.',
        'data-testid': 'contained-card',
    },
};

// With header
export const WithHeader: Story = {
    args: {
        header: (
            <CardHeader
                title="Card Title"
                subtitle="Card subtitle"
                avatar={<UserCircleIcon className="w-10 h-10 text-gray-400" />}
                action={
                    <button className="p-1 hover:bg-gray-100 rounded">
                        <EllipsisVerticalIcon className="w-5 h-5" />
                    </button>
                }
            />
        ),
        children: 'This card has a header with an avatar, title, subtitle, and action button.',
        'data-testid': 'header-card',
    },
};

// With actions
export const WithActions: Story = {
    args: {
        children: 'This card has action buttons at the bottom for user interactions.',
        actions: (
            <CardActions>
                <Button variant="ghost" size="small">Cancel</Button>
                <Button variant="primary" size="small">Save</Button>
            </CardActions>
        ),
        'data-testid': 'actions-card',
    },
};

// With footer
export const WithFooter: Story = {
    args: {
        children: 'This card has a footer section for additional information.',
        footer: (
            <div className="text-sm text-gray-600">
                Last updated: 2 hours ago
            </div>
        ),
        'data-testid': 'footer-card',
    },
};

// With media
export const WithMedia: Story = {
    args: {
        media: (
            <CardMedia
                src="https://picsum.photos/400/200"
                alt="Random image"
                height={200}
            />
        ),
        header: (
            <CardHeader
                title="Beautiful Landscape"
                subtitle="Nature photography"
            />
        ),
        children: 'This stunning landscape photo was captured during golden hour, showcasing the natural beauty of the mountains.',
        actions: (
            <CardActions>
                <Button variant="ghost" size="small" startIcon={<HeartIcon className="w-4 h-4" />}>
                    Like
                </Button>
                <Button variant="ghost" size="small" startIcon={<ShareIcon className="w-4 h-4" />}>
                    Share
                </Button>
            </CardActions>
        ),
        'data-testid': 'media-card',
    },
};

// Media positions
export const MediaLeft: Story = {
    args: {
        mediaPosition: 'left',
        media: (
            <CardMedia
                src="https://picsum.photos/200/150"
                alt="Thumbnail"
            />
        ),
        children: (
            <>
                <h3 className="font-semibold mb-2">Article Title</h3>
                <p className="text-sm text-gray-600">This is a horizontal card layout with media on the left side.</p>
            </>
        ),
        'data-testid': 'media-left-card',
    },
};

export const MediaRight: Story = {
    args: {
        mediaPosition: 'right',
        media: (
            <CardMedia
                src="https://picsum.photos/200/150"
                alt="Thumbnail"
            />
        ),
        children: (
            <>
                <h3 className="font-semibold mb-2">Article Title</h3>
                <p className="text-sm text-gray-600">This is a horizontal card layout with media on the right side.</p>
            </>
        ),
        'data-testid': 'media-right-card',
    },
};

// States
export const Clickable: Story = {
    args: {
        clickable: true,
        onClick: () => alert('Card clicked!'),
        children: 'This card is clickable. Try clicking on it!',
        'data-testid': 'clickable-card',
    },
};

export const Selected: Story = {
    args: {
        selected: true,
        clickable: true,
        children: 'This card is in a selected state.',
        'data-testid': 'selected-card',
    },
};

export const Disabled: Story = {
    args: {
        disabled: true,
        clickable: true,
        children: 'This card is disabled and cannot be interacted with.',
        'data-testid': 'disabled-card',
    },
};

export const Loading: Story = {
    args: {
        loading: true,
        children: 'This card is loading. A spinner overlay is shown.',
        'data-testid': 'loading-card',
    },
};

export const Skeleton: Story = {
    args: {
        skeleton: true,
        'data-testid': 'skeleton-card',
    },
};

// Complex examples
export const SocialMediaPost: Story = {
    args: {
        variant: 'elevated',
        header: (
            <CardHeader
                title="John Doe"
                subtitle="2 hours ago"
                avatar={<UserCircleIcon className="w-10 h-10 text-blue-500" />}
                action={
                    <button className="p-1 hover:bg-gray-100 rounded">
                        <EllipsisVerticalIcon className="w-5 h-5" />
                    </button>
                }
            />
        ),
        children: "Just launched our new product! ðŸš€ Excited to share this with everyone. Check it out and let me know what you think!",
        media: (
            <CardMedia
                src="https://picsum.photos/600/400"
                alt="Product launch"
                height={300}
            />
        ),
        actions: (
            <CardActions align="space-between">
                <div className="flex gap-4">
                    <button className="flex items-center gap-1 text-gray-600 hover:text-blue-600">
                        <HeartIcon className="w-5 h-5" />
                        <span className="text-sm">24</span>
                    </button>
                    <button className="flex items-center gap-1 text-gray-600 hover:text-blue-600">
                        <ChatBubbleLeftIcon className="w-5 h-5" />
                        <span className="text-sm">8</span>
                    </button>
                    <button className="flex items-center gap-1 text-gray-600 hover:text-blue-600">
                        <ShareIcon className="w-5 h-5" />
                        <span className="text-sm">Share</span>
                    </button>
                </div>
            </CardActions>
        ),
        'data-testid': 'social-media-card',
    },
};

export const ProductCard: Story = {
    args: {
        variant: 'outlined',
        clickable: true,
        onClick: () => alert('View product details'),
        media: (
            <CardMedia
                src="https://picsum.photos/300/200"
                alt="Product"
                height={200}
            />
        ),
        children: (
            <>
                <h3 className="font-semibold text-lg mb-1">Premium Headphones</h3>
                <p className="text-sm text-gray-600 mb-2">Wireless noise-cancelling headphones</p>
                <div className="flex items-center justify-between">
                    <span className="text-2xl font-bold text-blue-600">$299</span>
                    <span className="text-sm text-gray-500 line-through">$399</span>
                </div>
            </>
        ),
        actions: (
            <CardActions>
                <Button variant="secondary" size="small" fullWidth>
                    Add to Cart
                </Button>
            </CardActions>
        ),
        'data-testid': 'product-card',
    },
};

// Padding examples
export const PaddingSizes: Story = {
    render: () => (
        <div className="space-y-4">
            <Card padding="none" variant="outlined">
                <div className="p-4">No padding (content has its own padding)</div>
            </Card>
            <Card padding="small" variant="outlined">
                Small padding
            </Card>
            <Card padding="medium" variant="outlined">
                Medium padding (default)
            </Card>
            <Card padding="large" variant="outlined">
                Large padding
            </Card>
        </div>
    ),
};

// Border radius examples
export const BorderRadiusExamples: Story = {
    render: () => (
        <div className="space-y-4">
            <Card borderRadius="none" variant="outlined">
                No border radius
            </Card>
            <Card borderRadius="small" variant="outlined">
                Small border radius
            </Card>
            <Card borderRadius="medium" variant="outlined">
                Medium border radius (default)
            </Card>
            <Card borderRadius="large" variant="outlined">
                Large border radius
            </Card>
        </div>
    ),
};

// Grid layout
export const CardGrid: Story = {
    render: () => (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" style={{ width: '900px' }}>
            {[1, 2, 3, 4, 5, 6].map((i) => (
                <Card key={i} variant="elevated" clickable>
                    <CardHeader
                        title={`Card ${i}`}
                        subtitle="Subtitle"
                        avatar={<div className="w-10 h-10 bg-blue-500 rounded-full" />}
                    />
                    <p className="text-sm text-gray-600">
                        This is card number {i} in a grid layout.
                    </p>
                </Card>
            ))}
        </div>
    ),
    parameters: {
        layout: 'padded',
    },
}; 