import type { Meta, StoryObj } from '@storybook/react';
import { Input } from './Input';
import { MagnifyingGlassIcon, UserIcon, LockClosedIcon, EyeIcon, EyeSlashIcon } from '@heroicons/react/24/outline';
import { useState } from 'react';

const meta = {
    title: 'Core/Input',
    component: Input,
    parameters: {
        layout: 'centered',
        docs: {
            description: {
                component: 'A customizable input field component with multiple variants, sizes, and states.',
            },
        },
    },
    tags: ['autodocs'],
    argTypes: {
        variant: {
            control: 'select',
            options: ['outlined', 'filled', 'standard'],
            description: 'Visual style variant of the input',
        },
        size: {
            control: 'select',
            options: ['small', 'medium', 'large'],
            description: 'Size of the input field',
        },
        error: {
            control: 'text',
            description: 'Error state - boolean or error message string',
        },
        disabled: {
            control: 'boolean',
            description: 'Disabled state of the input',
        },
        fullWidth: {
            control: 'boolean',
            description: 'Whether the input should take full width',
        },
        showCount: {
            control: 'boolean',
            description: 'Whether to show character count',
        },
        type: {
            control: 'select',
            options: ['text', 'password', 'email', 'number', 'tel', 'url'],
            description: 'HTML input type',
        },
    },
} satisfies Meta<typeof Input>;

export default meta;
type Story = StoryObj<typeof meta>;

// Basic variants
export const Default: Story = {
    args: {
        label: 'Username',
        placeholder: 'Enter your username',
        'data-testid': 'default-input',
    },
};

export const Outlined: Story = {
    args: {
        variant: 'outlined',
        label: 'Email',
        placeholder: 'example@email.com',
        type: 'email',
        'data-testid': 'outlined-input',
    },
};

export const Filled: Story = {
    args: {
        variant: 'filled',
        label: 'Name',
        placeholder: 'John Doe',
        'data-testid': 'filled-input',
    },
};

export const Standard: Story = {
    args: {
        variant: 'standard',
        label: 'Phone',
        placeholder: '+1 (555) 000-0000',
        type: 'tel',
        'data-testid': 'standard-input',
    },
};

// Sizes
export const Small: Story = {
    args: {
        size: 'small',
        label: 'Small Input',
        placeholder: 'Small size',
        'data-testid': 'small-input',
    },
};

export const Large: Story = {
    args: {
        size: 'large',
        label: 'Large Input',
        placeholder: 'Large size',
        'data-testid': 'large-input',
    },
};

// States
export const WithError: Story = {
    args: {
        label: 'Email',
        error: 'Please enter a valid email address',
        defaultValue: 'invalid-email',
        type: 'email',
        'data-testid': 'error-input',
    },
};

export const Disabled: Story = {
    args: {
        label: 'Disabled Input',
        disabled: true,
        defaultValue: 'This field is disabled',
        'data-testid': 'disabled-input',
    },
};

export const Required: Story = {
    args: {
        label: 'Required Field',
        required: true,
        placeholder: 'This field is required',
        'data-testid': 'required-input',
    },
};

// With icons
export const WithStartIcon: Story = {
    args: {
        label: 'Username',
        startIcon: <UserIcon className="w-5 h-5" />,
        placeholder: 'Enter username',
        'data-testid': 'start-icon-input',
    },
};

export const WithEndIcon: Story = {
    args: {
        label: 'Search',
        endIcon: <MagnifyingGlassIcon className="w-5 h-5" />,
        placeholder: 'Search...',
        'data-testid': 'end-icon-input',
    },
};

export const WithBothIcons: Story = {
    args: {
        label: 'Password',
        type: 'password',
        startIcon: <LockClosedIcon className="w-5 h-5" />,
        endIcon: <EyeIcon className="w-5 h-5" />,
        placeholder: 'Enter password',
        'data-testid': 'both-icons-input',
    },
};

// With helper text
export const WithHelperText: Story = {
    args: {
        label: 'Password',
        helperText: 'Must be at least 8 characters',
        type: 'password',
        'data-testid': 'helper-text-input',
    },
};

// With character count
export const WithCharacterCount: Story = {
    args: {
        label: 'Bio',
        showCount: true,
        maxLength: 100,
        placeholder: 'Tell us about yourself',
        'data-testid': 'char-count-input',
    },
};

// Full width
export const FullWidth: Story = {
    args: {
        label: 'Full Width Input',
        fullWidth: true,
        placeholder: 'This input takes full width',
        'data-testid': 'full-width-input',
    },
    parameters: {
        layout: 'padded',
    },
};

// Interactive password toggle
export const PasswordToggle: Story = {
    render: () => {
        const [showPassword, setShowPassword] = useState(false);

        return (
            <Input
                label="Password"
                type={showPassword ? 'text' : 'password'}
                startIcon={<LockClosedIcon className="w-5 h-5" />}
                endIcon={
                    <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="p-1 hover:bg-gray-100 rounded"
                    >
                        {showPassword ? (
                            <EyeSlashIcon className="w-5 h-5" />
                        ) : (
                            <EyeIcon className="w-5 h-5" />
                        )}
                    </button>
                }
                placeholder="Enter password"
                data-testid="password-toggle-input"
            />
        );
    },
};

// Form example
export const FormExample: Story = {
    render: () => {
        const [formData, setFormData] = useState({
            username: '',
            email: '',
            password: '',
        });

        const [errors, setErrors] = useState<Record<string, string>>({});

        const handleSubmit = (e: React.FormEvent) => {
            e.preventDefault();
            const newErrors: Record<string, string> = {};

            if (!formData.username) {
                newErrors.username = 'Username is required';
            }
            if (!formData.email || !formData.email.includes('@')) {
                newErrors.email = 'Please enter a valid email';
            }
            if (!formData.password || formData.password.length < 8) {
                newErrors.password = 'Password must be at least 8 characters';
            }

            setErrors(newErrors);

            if (Object.keys(newErrors).length === 0) {
                alert('Form submitted successfully!');
            }
        };

        return (
            <form onSubmit={handleSubmit} className="space-y-4 w-96">
                <Input
                    label="Username"
                    value={formData.username}
                    onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                    error={errors.username}
                    required
                    startIcon={<UserIcon className="w-5 h-5" />}
                    data-testid="form-username"
                />

                <Input
                    label="Email"
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    error={errors.email}
                    required
                    data-testid="form-email"
                />

                <Input
                    label="Password"
                    type="password"
                    value={formData.password}
                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                    error={errors.password}
                    helperText="Must be at least 8 characters"
                    required
                    startIcon={<LockClosedIcon className="w-5 h-5" />}
                    data-testid="form-password"
                />

                <button
                    type="submit"
                    className="w-full bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700"
                >
                    Submit
                </button>
            </form>
        );
    },
    parameters: {
        layout: 'centered',
    },
};

// All variants showcase
export const AllVariants: Story = {
    render: () => (
        <div className="space-y-8">
            <div className="space-y-4">
                <h3 className="text-lg font-semibold">Outlined Variant</h3>
                <div className="grid grid-cols-3 gap-4">
                    <Input variant="outlined" size="small" label="Small" placeholder="Small outlined" />
                    <Input variant="outlined" size="medium" label="Medium" placeholder="Medium outlined" />
                    <Input variant="outlined" size="large" label="Large" placeholder="Large outlined" />
                </div>
            </div>

            <div className="space-y-4">
                <h3 className="text-lg font-semibold">Filled Variant</h3>
                <div className="grid grid-cols-3 gap-4">
                    <Input variant="filled" size="small" label="Small" placeholder="Small filled" />
                    <Input variant="filled" size="medium" label="Medium" placeholder="Medium filled" />
                    <Input variant="filled" size="large" label="Large" placeholder="Large filled" />
                </div>
            </div>

            <div className="space-y-4">
                <h3 className="text-lg font-semibold">Standard Variant</h3>
                <div className="grid grid-cols-3 gap-4">
                    <Input variant="standard" size="small" label="Small" placeholder="Small standard" />
                    <Input variant="standard" size="medium" label="Medium" placeholder="Medium standard" />
                    <Input variant="standard" size="large" label="Large" placeholder="Large standard" />
                </div>
            </div>
        </div>
    ),
    parameters: {
        layout: 'padded',
    },
}; 