import type { Meta, StoryObj } from '@storybook/react';
import { useState } from 'react';
import { Modal, ConfirmModal, AlertModal } from './Modal';
import { Button } from '../Core/Button/Button';
import { Input } from '../Input/Input';
import { Card } from '../Card/Card';

const meta = {
    title: 'Core/Modal',
    component: Modal,
    parameters: {
        layout: 'centered',
        docs: {
            description: {
                component: 'A flexible modal component with animations, size variants, and specialized confirm/alert modals.',
            },
        },
    },
    tags: ['autodocs'],
    argTypes: {
        isOpen: {
            control: 'boolean',
            description: 'Whether the modal is open',
        },
        size: {
            control: 'select',
            options: ['small', 'medium', 'large', 'fullscreen'],
            description: 'Modal size',
        },
        animation: {
            control: 'select',
            options: ['fade', 'slide', 'scale', 'none'],
            description: 'Animation type',
        },
        showCloseButton: {
            control: 'boolean',
            description: 'Whether to show close button',
        },
        closeOnBackdropClick: {
            control: 'boolean',
            description: 'Whether clicking backdrop closes modal',
        },
        closeOnEscape: {
            control: 'boolean',
            description: 'Whether pressing Escape closes modal',
        },
    },
} satisfies Meta<typeof Modal>;

export default meta;
type Story = StoryObj<typeof meta>;

// Basic modal
export const Basic: Story = {
    render: () => {
        const [isOpen, setIsOpen] = useState(false);

        return (
            <>
                <Button onClick={() => setIsOpen(true)}>Open Modal</Button>
                <Modal
                    isOpen={isOpen}
                    onClose={() => setIsOpen(false)}
                    title="Basic Modal"
                    data-testid="basic-modal"
                >
                    <p>This is a basic modal with default settings.</p>
                    <p>Click the close button, press Escape, or click outside to close.</p>
                </Modal>
            </>
        );
    },
};

// Different sizes
export const Sizes: Story = {
    render: () => {
        const [openModal, setOpenModal] = useState<string | null>(null);

        const sizes = ['small', 'medium', 'large', 'fullscreen'] as const;

        return (
            <div className="flex gap-4">
                {sizes.map((size) => (
                    <Button key={size} onClick={() => setOpenModal(size)}>
                        {size.charAt(0).toUpperCase() + size.slice(1)}
                    </Button>
                ))}

                {sizes.map((size) => (
                    <Modal
                        key={size}
                        isOpen={openModal === size}
                        onClose={() => setOpenModal(null)}
                        title={`${size.charAt(0).toUpperCase() + size.slice(1)} Modal`}
                        size={size}
                    >
                        <p>This is a {size} modal.</p>
                        {size === 'fullscreen' && (
                            <>
                                <p>Fullscreen modals are great for complex forms or detailed content.</p>
                                <div style={{ height: '500px', background: '#f3f4f6', borderRadius: '8px', padding: '20px', marginTop: '20px' }}>
                                    <p>Content area with scroll...</p>
                                </div>
                            </>
                        )}
                    </Modal>
                ))}
            </div>
        );
    },
};

// Different animations
export const Animations: Story = {
    render: () => {
        const [openModal, setOpenModal] = useState<string | null>(null);

        const animations = ['fade', 'slide', 'scale', 'none'] as const;

        return (
            <div className="flex gap-4">
                {animations.map((animation) => (
                    <Button key={animation} onClick={() => setOpenModal(animation)}>
                        {animation.charAt(0).toUpperCase() + animation.slice(1)} Animation
                    </Button>
                ))}

                {animations.map((animation) => (
                    <Modal
                        key={animation}
                        isOpen={openModal === animation}
                        onClose={() => setOpenModal(null)}
                        title={`${animation.charAt(0).toUpperCase() + animation.slice(1)} Animation`}
                        animation={animation}
                    >
                        <p>This modal uses the "{animation}" animation.</p>
                    </Modal>
                ))}
            </div>
        );
    },
};

// With footer
export const WithFooter: Story = {
    render: () => {
        const [isOpen, setIsOpen] = useState(false);

        return (
            <>
                <Button onClick={() => setIsOpen(true)}>Open Modal with Footer</Button>
                <Modal
                    isOpen={isOpen}
                    onClose={() => setIsOpen(false)}
                    title="Modal with Footer"
                    footer={
                        <div className="flex gap-2 justify-end">
                            <Button variant="ghost" onClick={() => setIsOpen(false)}>
                                Cancel
                            </Button>
                            <Button variant="primary" onClick={() => setIsOpen(false)}>
                                Save Changes
                            </Button>
                        </div>
                    }
                >
                    <p>This modal has a custom footer with action buttons.</p>
                    <p>The footer is separated from the content with a border.</p>
                </Modal>
            </>
        );
    },
};

// No close button
export const NoCloseButton: Story = {
    render: () => {
        const [isOpen, setIsOpen] = useState(false);

        return (
            <>
                <Button onClick={() => setIsOpen(true)}>Open Modal</Button>
                <Modal
                    isOpen={isOpen}
                    onClose={() => setIsOpen(false)}
                    title="No Close Button"
                    showCloseButton={false}
                    closeOnBackdropClick={false}
                    closeOnEscape={false}
                    footer={
                        <Button variant="primary" onClick={() => setIsOpen(false)} fullWidth>
                            I Understand
                        </Button>
                    }
                >
                    <p>This modal cannot be closed by clicking outside or pressing Escape.</p>
                    <p>You must click the button below to proceed.</p>
                </Modal>
            </>
        );
    },
};

// Confirm modal
export const ConfirmExample: Story = {
    render: () => {
        const [isOpen, setIsOpen] = useState(false);
        const [loading, setLoading] = useState(false);

        const handleConfirm = () => {
            setLoading(true);
            setTimeout(() => {
                setLoading(false);
                setIsOpen(false);
            }, 2000);
        };

        return (
            <>
                <Button onClick={() => setIsOpen(true)}>Delete Item</Button>
                <ConfirmModal
                    isOpen={isOpen}
                    onClose={() => setIsOpen(false)}
                    onConfirm={handleConfirm}
                    title="Delete Item"
                    message="Are you sure you want to delete this item? This action cannot be undone."
                    confirmText="Delete"
                    variant="danger"
                    loading={loading}
                />
            </>
        );
    },
};

// Alert modals
export const AlertExamples: Story = {
    render: () => {
        const [openAlert, setOpenAlert] = useState<string | null>(null);

        const variants = ['success', 'error', 'warning', 'info'] as const;

        return (
            <div className="flex gap-4">
                {variants.map((variant) => (
                    <Button key={variant} onClick={() => setOpenAlert(variant)}>
                        {variant.charAt(0).toUpperCase() + variant.slice(1)} Alert
                    </Button>
                ))}

                <AlertModal
                    isOpen={openAlert === 'success'}
                    onClose={() => setOpenAlert(null)}
                    title="Success!"
                    message="Your changes have been saved successfully."
                    variant="success"
                />

                <AlertModal
                    isOpen={openAlert === 'error'}
                    onClose={() => setOpenAlert(null)}
                    title="Error"
                    message="Something went wrong. Please try again later."
                    variant="error"
                />

                <AlertModal
                    isOpen={openAlert === 'warning'}
                    onClose={() => setOpenAlert(null)}
                    title="Warning"
                    message="Your session will expire in 5 minutes. Please save your work."
                    variant="warning"
                />

                <AlertModal
                    isOpen={openAlert === 'info'}
                    onClose={() => setOpenAlert(null)}
                    title="Information"
                    message="A new version of the app is available. Please refresh to update."
                    variant="info"
                />
            </div>
        );
    },
};

// Complex form example
export const FormExample: Story = {
    render: () => {
        const [isOpen, setIsOpen] = useState(false);
        const [formData, setFormData] = useState({
            name: '',
            email: '',
            message: '',
        });

        const handleSubmit = () => {
            console.log('Form submitted:', formData);
            setIsOpen(false);
            setFormData({ name: '', email: '', message: '' });
        };

        return (
            <>
                <Button onClick={() => setIsOpen(true)}>Contact Us</Button>
                <Modal
                    isOpen={isOpen}
                    onClose={() => setIsOpen(false)}
                    title="Contact Form"
                    size="medium"
                    footer={
                        <div className="flex gap-2 justify-end">
                            <Button variant="ghost" onClick={() => setIsOpen(false)}>
                                Cancel
                            </Button>
                            <Button variant="primary" onClick={handleSubmit}>
                                Send Message
                            </Button>
                        </div>
                    }
                >
                    <form className="space-y-4">
                        <Input
                            label="Name"
                            value={formData.name}
                            onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                            placeholder="Your name"
                        />
                        <Input
                            label="Email"
                            type="email"
                            value={formData.email}
                            onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                            placeholder="your@email.com"
                        />
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Message
                            </label>
                            <textarea
                                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                rows={4}
                                value={formData.message}
                                onChange={(e) => setFormData({ ...formData, message: e.target.value })}
                                placeholder="Your message..."
                            />
                        </div>
                    </form>
                </Modal>
            </>
        );
    },
};

// Nested modals
export const NestedModals: Story = {
    render: () => {
        const [isFirstOpen, setIsFirstOpen] = useState(false);
        const [isSecondOpen, setIsSecondOpen] = useState(false);

        return (
            <>
                <Button onClick={() => setIsFirstOpen(true)}>Open First Modal</Button>

                <Modal
                    isOpen={isFirstOpen}
                    onClose={() => setIsFirstOpen(false)}
                    title="First Modal"
                    zIndex={1000}
                >
                    <p>This is the first modal.</p>
                    <Button onClick={() => setIsSecondOpen(true)}>
                        Open Second Modal
                    </Button>
                </Modal>

                <Modal
                    isOpen={isSecondOpen}
                    onClose={() => setIsSecondOpen(false)}
                    title="Second Modal"
                    size="small"
                    zIndex={1100}
                >
                    <p>This modal is on top of the first one.</p>
                    <p>Each modal has its own z-index.</p>
                </Modal>
            </>
        );
    },
};

// Scrollable content
export const ScrollableContent: Story = {
    render: () => {
        const [isOpen, setIsOpen] = useState(false);

        return (
            <>
                <Button onClick={() => setIsOpen(true)}>Open Scrollable Modal</Button>
                <Modal
                    isOpen={isOpen}
                    onClose={() => setIsOpen(false)}
                    title="Terms and Conditions"
                    footer={
                        <div className="flex gap-2 justify-end">
                            <Button variant="ghost" onClick={() => setIsOpen(false)}>
                                Decline
                            </Button>
                            <Button variant="primary" onClick={() => setIsOpen(false)}>
                                Accept
                            </Button>
                        </div>
                    }
                >
                    <div className="prose max-w-none">
                        <h3>1. Introduction</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>

                        <h3>2. Terms of Use</h3>
                        <p>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua...</p>

                        {[...Array(10)].map((_, i) => (
                            <div key={i}>
                                <h3>{i + 3}. Section {i + 3}</h3>
                                <p>
                                    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
                                    nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
                                    reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
                                    pariatur.
                                </p>
                            </div>
                        ))}
                    </div>
                </Modal>
            </>
        );
    },
};

// Custom content
export const CustomContent: Story = {
    render: () => {
        const [isOpen, setIsOpen] = useState(false);

        return (
            <>
                <Button onClick={() => setIsOpen(true)}>View Profile</Button>
                <Modal
                    isOpen={isOpen}
                    onClose={() => setIsOpen(false)}
                    showCloseButton={true}
                    size="medium"
                >
                    <Card className="border-0 shadow-none">
                        <div className="text-center">
                            <div className="w-24 h-24 bg-blue-500 rounded-full mx-auto mb-4 flex items-center justify-center text-white text-3xl font-bold">
                                JD
                            </div>
                            <h2 className="text-2xl font-bold mb-2">John Doe</h2>
                            <p className="text-gray-600 mb-4">Software Engineer</p>
                            <div className="flex gap-4 justify-center mb-6">
                                <div className="text-center">
                                    <div className="text-2xl font-bold">152</div>
                                    <div className="text-sm text-gray-600">Projects</div>
                                </div>
                                <div className="text-center">
                                    <div className="text-2xl font-bold">2.3k</div>
                                    <div className="text-sm text-gray-600">Followers</div>
                                </div>
                                <div className="text-center">
                                    <div className="text-2xl font-bold">845</div>
                                    <div className="text-sm text-gray-600">Following</div>
                                </div>
                            </div>
                            <div className="flex gap-2 justify-center">
                                <Button variant="primary">Follow</Button>
                                <Button variant="ghost">Message</Button>
                            </div>
                        </div>
                    </Card>
                </Modal>
            </>
        );
    },
}; 