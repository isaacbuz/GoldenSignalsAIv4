/**
 * DebugPanel Storybook Stories
 */

import type { Meta, StoryObj } from '@storybook/react';
import { DebugPanel } from './DebugPanel';
import { logger } from '@/services/logging/logger';

const meta = {
  title: 'Developer Tools/DebugPanel',
  component: DebugPanel,
  parameters: {
    layout: 'fullscreen',
    docs: {
      description: {
        component: 'A debug panel that displays frontend logs, errors, and warnings. Essential for development and debugging.'
      }
    }
  },
  tags: ['autodocs'],
} satisfies Meta<typeof DebugPanel>;

export default meta;
type Story = StoryObj<typeof meta>;

// Helper to generate mock logs
const generateMockLogs = () => {
  logger.info('Application started', { version: '1.0.0', environment: 'development' });
  logger.debug('Debug mode enabled', { features: ['logging', 'monitoring'] });
  logger.warn('WebSocket connection slow', { latency: 1500, threshold: 1000 });
  logger.error('Failed to fetch market data', new Error('Network timeout'), {
    endpoint: '/api/v1/market-data/AAPL',
    timeout: 30000
  });
  logger.info('User logged in', { userId: '12345', role: 'trader' });
  logger.warn('High memory usage detected', { used: '85%', threshold: '80%' });
  logger.error('Invalid API response', new Error('Unexpected token in JSON'), {
    response: '{"data": [invalid json}',
    statusCode: 200
  });
};

export const Default: Story = {
  render: () => {
    // Generate some logs when story loads
    generateMockLogs();

    return (
      <div style={{ height: '100vh', padding: '1rem', backgroundColor: '#1e1e1e' }}>
        <DebugPanel />
      </div>
    );
  }
};

export const WithActiveErrors: Story = {
  render: () => {
    // Generate errors on mount
    logger.error('Critical: Database connection failed', new Error('ECONNREFUSED'), {
      host: 'localhost',
      port: 5432,
      retries: 3
    });

    logger.error('WebSocket disconnected unexpectedly', new Error('Connection reset by peer'), {
      code: 1006,
      wasClean: false
    });

    logger.error('Authentication failed', new Error('Invalid token'), {
      token: 'Bearer eyJhbGc...',
      expiresAt: new Date().toISOString()
    });

    return (
      <div style={{ height: '100vh', padding: '1rem', backgroundColor: '#1e1e1e' }}>
        <DebugPanel />
      </div>
    );
  }
};

export const WithWarnings: Story = {
  render: () => {
    // Generate warnings
    logger.warn('Deprecation notice: This API will be removed in v3.0', {
      api: '/api/v1/legacy/signals',
      replacement: '/api/v2/signals'
    });

    logger.warn('Performance warning: Slow render detected', {
      component: 'TradingChart',
      duration: 250,
      threshold: 100
    });

    logger.warn('Memory leak detected', {
      component: 'MarketDataStream',
      listeners: 1500,
      maxListeners: 1000
    });

    return (
      <div style={{ height: '100vh', padding: '1rem', backgroundColor: '#1e1e1e' }}>
        <DebugPanel />
      </div>
    );
  }
};

export const InteractiveDemo: Story = {
  render: () => {
    return (
      <div style={{ height: '100vh', padding: '1rem', backgroundColor: '#1e1e1e' }}>
        <div style={{ marginBottom: '1rem' }}>
          <h2 style={{ color: 'white' }}>Interactive Debug Panel Demo</h2>
          <div style={{ display: 'flex', gap: '0.5rem', marginTop: '1rem' }}>
            <button
              onClick={() => logger.info('Button clicked', { action: 'info' })}
              style={{ padding: '0.5rem 1rem', backgroundColor: '#2196f3', color: 'white', border: 'none', borderRadius: '4px' }}
            >
              Log Info
            </button>
            <button
              onClick={() => logger.warn('Warning triggered', { severity: 'medium' })}
              style={{ padding: '0.5rem 1rem', backgroundColor: '#ff9800', color: 'white', border: 'none', borderRadius: '4px' }}
            >
              Log Warning
            </button>
            <button
              onClick={() => logger.error('Error occurred', new Error('Test error'), { critical: false })}
              style={{ padding: '0.5rem 1rem', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px' }}
            >
              Log Error
            </button>
            <button
              onClick={() => logger.debug('Debug data', { timestamp: Date.now() })}
              style={{ padding: '0.5rem 1rem', backgroundColor: '#4caf50', color: 'white', border: 'none', borderRadius: '4px' }}
            >
              Log Debug
            </button>
          </div>
        </div>
        <DebugPanel />
      </div>
    );
  }
};

export const EmptyState: Story = {
  render: () => {
    // Clear logs before rendering
    const clearLogs = () => {
      // This would normally clear logs from the logger service
      // For demo, we just render without generating logs
    };

    clearLogs();

    return (
      <div style={{ height: '100vh', padding: '1rem', backgroundColor: '#1e1e1e' }}>
        <DebugPanel />
      </div>
    );
  }
};

export const HighVolumeLogging: Story = {
  render: () => {
    // Simulate high-volume logging scenario
    const simulateHighVolume = () => {
      for (let i = 0; i < 50; i++) {
        setTimeout(() => {
          const types = ['info', 'debug', 'warn', 'error'] as const;
          const type = types[Math.floor(Math.random() * types.length)];
          const messages = [
            'Market data received',
            'Order placed successfully',
            'Price alert triggered',
            'Connection established',
            'Cache hit',
            'Query executed',
            'Webhook received',
            'Task completed'
          ];
          const message = messages[Math.floor(Math.random() * messages.length)];

          if (type === 'error') {
            logger[type](message, new Error(`Error ${i}`), { index: i });
          } else {
            logger[type](message, { index: i, timestamp: Date.now() });
          }
        }, i * 100);
      }
    };

    simulateHighVolume();

    return (
      <div style={{ height: '100vh', padding: '1rem', backgroundColor: '#1e1e1e' }}>
        <h3 style={{ color: 'white', marginBottom: '1rem' }}>
          High Volume Logging Test (50 logs over 5 seconds)
        </h3>
        <DebugPanel />
      </div>
    );
  }
};
