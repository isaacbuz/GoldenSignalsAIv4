import type { Meta, StoryObj } from '@storybook/react';
import { useState } from 'react';
import { Table, Column } from './Table';
import { Button } from '../Core/Button/Button';
import { Card } from '../Card/Card';
import { TrashIcon, PencilIcon, EyeIcon } from '@heroicons/react/24/outline';

// Sample data types
interface User {
    id: number;
    name: string;
    email: string;
    role: string;
    status: 'active' | 'inactive' | 'pending';
    joinDate: string;
    lastActive: string;
}

interface Product {
    id: number;
    name: string;
    category: string;
    price: number;
    stock: number;
    sales: number;
    rating: number;
}

// Sample data
const sampleUsers: User[] = [
    { id: 1, name: 'John Doe', email: 'john@example.com', role: 'Admin', status: 'active', joinDate: '2023-01-15', lastActive: '2024-01-20' },
    { id: 2, name: 'Jane Smith', email: 'jane@example.com', role: 'User', status: 'active', joinDate: '2023-02-20', lastActive: '2024-01-19' },
    { id: 3, name: 'Bob Johnson', email: 'bob@example.com', role: 'User', status: 'inactive', joinDate: '2023-03-10', lastActive: '2023-12-01' },
    { id: 4, name: 'Alice Brown', email: 'alice@example.com', role: 'Manager', status: 'active', joinDate: '2023-04-05', lastActive: '2024-01-20' },
    { id: 5, name: 'Charlie Wilson', email: 'charlie@example.com', role: 'User', status: 'pending', joinDate: '2023-05-15', lastActive: '2024-01-18' },
    { id: 6, name: 'Diana Martinez', email: 'diana@example.com', role: 'Admin', status: 'active', joinDate: '2023-06-20', lastActive: '2024-01-20' },
    { id: 7, name: 'Edward Davis', email: 'edward@example.com', role: 'User', status: 'active', joinDate: '2023-07-10', lastActive: '2024-01-17' },
    { id: 8, name: 'Fiona Garcia', email: 'fiona@example.com', role: 'Manager', status: 'inactive', joinDate: '2023-08-05', lastActive: '2023-11-15' },
];

const sampleProducts: Product[] = Array.from({ length: 50 }, (_, i) => ({
    id: i + 1,
    name: `Product ${i + 1}`,
    category: ['Electronics', 'Clothing', 'Books', 'Home', 'Sports'][Math.floor(Math.random() * 5)],
    price: Math.floor(Math.random() * 900) + 10,
    stock: Math.floor(Math.random() * 100),
    sales: Math.floor(Math.random() * 1000),
    rating: Math.round((Math.random() * 2 + 3) * 10) / 10,
}));

const meta = {
    title: 'Core/Table',
    component: Table,
    parameters: {
        layout: 'padded',
        docs: {
            description: {
                component: 'A feature-rich data table component with sorting, filtering, pagination, and row selection.',
            },
        },
    },
    tags: ['autodocs'],
} satisfies Meta<typeof Table>;

export default meta;
type Story = StoryObj<typeof meta>;

// Basic table
export const Basic: Story = {
    args: {
        data: sampleUsers.slice(0, 5),
        columns: [
            { id: 'name', header: 'Name', accessor: 'name' },
            { id: 'email', header: 'Email', accessor: 'email' },
            { id: 'role', header: 'Role', accessor: 'role' },
            { id: 'status', header: 'Status', accessor: 'status' },
        ] as Column<User>[],
        'data-testid': 'basic-table',
    },
};

// With custom cell rendering
export const CustomCells: Story = {
    args: {
        data: sampleUsers,
        columns: [
            { id: 'name', header: 'Name', accessor: 'name' },
            { id: 'email', header: 'Email', accessor: 'email' },
            { id: 'role', header: 'Role', accessor: 'role' },
            {
                id: 'status',
                header: 'Status',
                accessor: 'status',
                cell: (value: string) => (
                    <span
                        className={`px-2 py-1 text-xs font-semibold rounded-full ${value === 'active'
                            ? 'bg-green-100 text-green-800'
                            : value === 'inactive'
                                ? 'bg-gray-100 text-gray-800'
                                : 'bg-yellow-100 text-yellow-800'
                            }`}
                    >
                        {value}
                    </span>
                ),
            },
        ] as Column<User>[],
        'data-testid': 'custom-cells-table',
    },
};

// With sorting
export const Sortable: Story = {
    args: {
        data: sampleUsers,
        sortable: true,
        columns: [
            { id: 'name', header: 'Name', accessor: 'name', sortable: true },
            { id: 'email', header: 'Email', accessor: 'email', sortable: true },
            { id: 'role', header: 'Role', accessor: 'role', sortable: true },
            { id: 'joinDate', header: 'Join Date', accessor: 'joinDate', sortable: true },
        ] as Column<User>[],
        'data-testid': 'sortable-table',
    },
};

// With filtering
export const Filterable: Story = {
    args: {
        data: sampleProducts.slice(0, 20),
        filterable: true,
        filterPlaceholder: 'Search products...',
        columns: [
            { id: 'name', header: 'Product', accessor: 'name' },
            { id: 'category', header: 'Category', accessor: 'category' },
            { id: 'price', header: 'Price', accessor: 'price', cell: (value: number) => `$${value}` },
            { id: 'stock', header: 'Stock', accessor: 'stock' },
        ] as Column<Product>[],
        'data-testid': 'filterable-table',
    },
};

// With pagination
export const Paginated: Story = {
    args: {
        data: sampleProducts,
        paginated: true,
        defaultPageSize: 10,
        pageSizeOptions: [5, 10, 25, 50],
        columns: [
            { id: 'id', header: 'ID', accessor: 'id', width: '60px' },
            { id: 'name', header: 'Product', accessor: 'name' },
            { id: 'category', header: 'Category', accessor: 'category' },
            { id: 'price', header: 'Price', accessor: 'price', cell: (value: number) => `$${value}` },
            { id: 'rating', header: 'Rating', accessor: 'rating', cell: (value: number) => `‚≠ê ${value}` },
        ] as Column<Product>[],
        'data-testid': 'paginated-table',
    },
};

// With row selection
export const Selectable: Story = {
    render: () => {
        const [selectedRows, setSelectedRows] = useState<Set<string | number>>(new Set([2, 4]));

        return (
            <div>
                <p className="mb-4">Selected IDs: {Array.from(selectedRows).join(', ') || 'None'}</p>
                <Table
                    data={sampleUsers}
                    columns={[
                        { id: 'id', header: 'ID', accessor: 'id', width: '60px' },
                        { id: 'name', header: 'Name', accessor: 'name' },
                        { id: 'email', header: 'Email', accessor: 'email' },
                        { id: 'role', header: 'Role', accessor: 'role' },
                    ] as Column<User>[]}
                    selectable
                    selectedRows={selectedRows}
                    onSelectionChange={setSelectedRows}
                    data-testid="selectable-table"
                />
            </div>
        );
    },
};

// Complete feature showcase
export const FullFeatured: Story = {
    render: () => {
        const [selectedRows, setSelectedRows] = useState<Set<string | number>>(new Set());

        const columns: Column<Product>[] = [
            { id: 'id', header: 'ID', accessor: 'id', width: '60px', sortable: true },
            { id: 'name', header: 'Product', accessor: 'name', sortable: true },
            {
                id: 'category',
                header: 'Category',
                accessor: 'category',
                sortable: true,
                cell: (value: string) => (
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                        {value}
                    </span>
                ),
            },
            {
                id: 'price',
                header: 'Price',
                accessor: 'price',
                sortable: true,
                align: 'right',
                cell: (value: number) => (
                    <span className="font-semibold">${value}</span>
                ),
            },
            {
                id: 'stock',
                header: 'Stock',
                accessor: 'stock',
                sortable: true,
                align: 'center',
                cell: (value: number) => (
                    <span className={value < 20 ? 'text-red-600' : 'text-green-600'}>
                        {value}
                    </span>
                ),
            },
            {
                id: 'actions',
                header: 'Actions',
                accessor: 'id',
                sortable: false,
                align: 'center',
                cell: (value: number) => (
                    <div className="flex justify-center gap-1">
                        <button className="p-1 hover:bg-gray-100 rounded" title="View">
                            <EyeIcon className="w-4 h-4" />
                        </button>
                        <button className="p-1 hover:bg-gray-100 rounded" title="Edit">
                            <PencilIcon className="w-4 h-4" />
                        </button>
                        <button className="p-1 hover:bg-gray-100 rounded" title="Delete">
                            <TrashIcon className="w-4 h-4" />
                        </button>
                    </div>
                ),
            },
        ];

        return (
            <div>
                <div className="mb-4 flex justify-between items-center">
                    <h3 className="text-lg font-semibold">Product Inventory</h3>
                    {selectedRows.size > 0 && (
                        <Button
                            variant="danger"
                            size="small"
                            onClick={() => {
                                alert(`Delete ${selectedRows.size} items?`);
                                setSelectedRows(new Set());
                            }}
                        >
                            Delete Selected ({selectedRows.size})
                        </Button>
                    )}
                </div>
                <Table
                    data={sampleProducts}
                    columns={columns}
                    selectable
                    selectedRows={selectedRows}
                    onSelectionChange={setSelectedRows}
                    sortable
                    filterable
                    filterPlaceholder="Search products..."
                    paginated
                    defaultPageSize={10}
                    striped
                    data-testid="full-featured-table"
                />
            </div>
        );
    },
};

// Table variants
export const Striped: Story = {
    args: {
        data: sampleUsers,
        striped: true,
        columns: [
            { id: 'name', header: 'Name', accessor: 'name' },
            { id: 'email', header: 'Email', accessor: 'email' },
            { id: 'role', header: 'Role', accessor: 'role' },
        ] as Column<User>[],
        'data-testid': 'striped-table',
    },
};

export const Bordered: Story = {
    args: {
        data: sampleUsers,
        bordered: true,
        columns: [
            { id: 'name', header: 'Name', accessor: 'name' },
            { id: 'email', header: 'Email', accessor: 'email' },
            { id: 'role', header: 'Role', accessor: 'role' },
        ] as Column<User>[],
        'data-testid': 'bordered-table',
    },
};

export const Compact: Story = {
    args: {
        data: sampleUsers,
        compact: true,
        columns: [
            { id: 'name', header: 'Name', accessor: 'name' },
            { id: 'email', header: 'Email', accessor: 'email' },
            { id: 'role', header: 'Role', accessor: 'role' },
        ] as Column<User>[],
        'data-testid': 'compact-table',
    },
};

// With sticky header
export const StickyHeader: Story = {
    args: {
        data: sampleProducts.slice(0, 30),
        stickyHeader: true,
        maxHeight: '400px',
        columns: [
            { id: 'id', header: 'ID', accessor: 'id', width: '60px' },
            { id: 'name', header: 'Product', accessor: 'name' },
            { id: 'category', header: 'Category', accessor: 'category' },
            { id: 'price', header: 'Price', accessor: 'price', cell: (value: number) => `$${value}` },
        ] as Column<Product>[],
        'data-testid': 'sticky-header-table',
    },
};

// Clickable rows
export const ClickableRows: Story = {
    args: {
        data: sampleUsers,
        clickableRows: true,
        onRowClick: (row) => alert(`Clicked on ${row.name}`),
        columns: [
            { id: 'name', header: 'Name', accessor: 'name' },
            { id: 'email', header: 'Email', accessor: 'email' },
            { id: 'role', header: 'Role', accessor: 'role' },
        ] as Column<User>[],
        'data-testid': 'clickable-rows-table',
    },
};

// Loading state
export const Loading: Story = {
    args: {
        data: [],
        loading: true,
        columns: [] as Column<any>[],
        'data-testid': 'loading-table',
    },
};

// Empty state
export const Empty: Story = {
    args: {
        data: [],
        columns: [
            { id: 'name', header: 'Name', accessor: 'name' },
            { id: 'email', header: 'Email', accessor: 'email' },
        ] as Column<any>[],
        emptyMessage: 'No users found. Try adjusting your filters or add a new user.',
        'data-testid': 'empty-table',
    },
};

// Inside a card
export const InCard: Story = {
    render: () => (
        <Card>
            <Table
                data={sampleUsers.slice(0, 5)}
                columns={[
                    { id: 'name', header: 'Name', accessor: 'name' },
                    { id: 'email', header: 'Email', accessor: 'email' },
                    { id: 'status', header: 'Status', accessor: 'status' },
                ] as Column<User>[]}
                compact
                data-testid="card-table"
            />
        </Card>
    ),
}; 