apiVersion: v1
kind: Namespace
metadata:
  name: goldensignals
---
# Universal Market Data MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: market-data-mcp
  namespace: goldensignals
  labels:
    app: market-data-mcp
    component: mcp-server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: market-data-mcp
  template:
    metadata:
      labels:
        app: market-data-mcp
        component: mcp-server
    spec:
      containers:
      - name: market-data-mcp
        image: goldensignals/market-data-mcp:latest
        ports:
        - containerPort: 8190
        env:
        - name: SERVICE_NAME
          value: "market-data-mcp"
        - name: LOG_LEVEL
          value: "INFO"
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8190
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8190
          initialDelaySeconds: 5
          periodSeconds: 5
---
# RAG Query MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rag-query-mcp
  namespace: goldensignals
  labels:
    app: rag-query-mcp
    component: mcp-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: rag-query-mcp
  template:
    metadata:
      labels:
        app: rag-query-mcp
        component: mcp-server
    spec:
      containers:
      - name: rag-query-mcp
        image: goldensignals/rag-query-mcp:latest
        ports:
        - containerPort: 8191
        env:
        - name: SERVICE_NAME
          value: "rag-query-mcp"
        - name: LOG_LEVEL
          value: "INFO"
        - name: VECTOR_DB_URL
          value: "http://vector-db-service:8000"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8191
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8191
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Agent Communication Hub Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-comm-mcp
  namespace: goldensignals
  labels:
    app: agent-comm-mcp
    component: mcp-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agent-comm-mcp
  template:
    metadata:
      labels:
        app: agent-comm-mcp
        component: mcp-server
    spec:
      containers:
      - name: agent-comm-mcp
        image: goldensignals/agent-comm-mcp:latest
        ports:
        - containerPort: 8192
        env:
        - name: SERVICE_NAME
          value: "agent-comm-mcp"
        - name: LOG_LEVEL
          value: "INFO"
        - name: KAFKA_BROKERS
          value: "kafka-service:9092"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8192
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8192
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Risk Analytics MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: risk-analytics-mcp
  namespace: goldensignals
  labels:
    app: risk-analytics-mcp
    component: mcp-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: risk-analytics-mcp
  template:
    metadata:
      labels:
        app: risk-analytics-mcp
        component: mcp-server
    spec:
      containers:
      - name: risk-analytics-mcp
        image: goldensignals/risk-analytics-mcp:latest
        ports:
        - containerPort: 8193
        env:
        - name: SERVICE_NAME
          value: "risk-analytics-mcp"
        - name: LOG_LEVEL
          value: "INFO"
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: postgres-url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8193
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8193
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Execution Management MCP Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: execution-mcp
  namespace: goldensignals
  labels:
    app: execution-mcp
    component: mcp-server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: execution-mcp
  template:
    metadata:
      labels:
        app: execution-mcp
        component: mcp-server
    spec:
      containers:
      - name: execution-mcp
        image: goldensignals/execution-mcp:latest
        ports:
        - containerPort: 8194
        env:
        - name: SERVICE_NAME
          value: "execution-mcp"
        - name: LOG_LEVEL
          value: "INFO"
        - name: BROKER_API_KEY
          valueFrom:
            secretKeyRef:
              name: broker-credentials
              key: api-key
        - name: BROKER_API_SECRET
          valueFrom:
            secretKeyRef:
              name: broker-credentials
              key: api-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8194
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8194
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Main API Gateway Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: goldensignals
  labels:
    app: api-gateway
    component: gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        component: gateway
    spec:
      containers:
      - name: api-gateway
        image: goldensignals/api-gateway:latest
        ports:
        - containerPort: 8000
        env:
        - name: SERVICE_NAME
          value: "api-gateway"
        - name: LOG_LEVEL
          value: "INFO"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: goldensignals
  labels:
    app: frontend
    component: ui
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        component: ui
    spec:
      containers:
      - name: frontend
        image: goldensignals/frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: REACT_APP_API_URL
          value: "https://api.goldensignals.ai"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5 